<?xml version="1.0"?>

<!-- This file includes targets for building FreeCol,
     the metaserver, distribution packages, running tests
     and creating documentation. -->
<project name="FreeCol" default="package">
    <description>
        This file includes targets for building FreeCol,
        the metaserver, distribution packages, running tests
        and creating documentation.
    </description>
    <property name="java.target.version" value="1.8"/>
    <property name="freecol.name" value="freecol"/>
    <property environment="env"/>
    <property name="freecol.data.dir" value="${basedir}/data"/>
    <property name="freecol.rules.dir" value="${basedir}/data/rules"/>
    <property name="freecol.src.dir" value="${basedir}/src"/>
    <property name="freecol.build.dir" value="${basedir}/build"/>
    <property name="freecol.packaging.dir" value="${basedir}/packaging"/>
    <property name="freecol.release.dir" value="${basedir}/dist"/>
    <property name="freecol.doc.dir" value="${basedir}/doc"/>
    <property name="freecol.javadoc.dir" value="${freecol.doc.dir}/javadoc"/>
    <property name="freecol.jar.file" value="${basedir}/FreeCol.jar"/>
    <property name="freecol.metaserver.jar.file"
              value="${basedir}/FreeCol-metaserver.jar"/>
    <property name="freecol.overview.file"
              value="${freecol.src.dir}/overview.html"/>
    <property name="test" value="AllTests"/>
    <property name="miglayout-swing.jar"
              value="jars/miglayout-swing-4.2.jar"/>
    <property name="miglayout-core.jar"
              value="jars/miglayout-core-4.2.jar"/>
    <property name="cli.jar" value="jars/commons-cli-1.1.jar"/>
    <property name="cortado.jar" value="jars/cortado-0.6.0.jar"/>


    <path id="libraries.classpath">
        <!-- MigLayout manager -->
        <pathelement location="${basedir}/${miglayout-swing.jar}"/>
        <pathelement location="${basedir}/${miglayout-core.jar}"/>
        <!-- Command line processor -->
        <pathelement location="${basedir}/${cli.jar}"/>
        <!-- Cortado Video Applet -->
        <pathelement location="${basedir}/${cortado.jar}"/>
        <!-- JOgg/JOrbis libraries -->
        <pathelement location="${basedir}/jars/jogg-0.0.17.jar"/>
        <pathelement location="${basedir}/jars/jorbis-0.0.17.jar"/>
    </path>
    <path id="junit.classpath">
        <pathelement location="${basedir}/test/lib/junit.jar" />
    </path>
    <path id="freecol.build.classpath">
        <path refid="libraries.classpath" />
    </path>
    <path id="test.build.classpath">
        <path refid="junit.classpath"/>
        <path refid="libraries.classpath" />
     </path>
    <path id="test.run.classpath">
        <pathelement location="${freecol.build.dir}" />
        <path refid="junit.classpath"/>
        <path refid="libraries.classpath" />
    </path>

    <condition property="isOsUnixLike">
        <os family="unix" />
    </condition>

    <condition property="isOsWindows">
            <os family="windows" />
    </condition>
    <condition property="isOsMac">
        <os family="mac" />
    </condition>

    <condition property="isNotMacOrWindows">
        <not>
            <or>
                <isset property="isOsWindows" />
                <isset property="isOsMac" />
            </or>
        </not>
    </condition>


    <target name="define-jsmoothgen">
        <taskdef name="jsmoothgen"
                 classname="net.charabia.jsmoothgen.ant.JSmoothGen"
                 classpath="${freecol.build.dir}/jars/jsmoothgen-ant.jar"/>
    </target>

    <target name="init" unless="TSTAMP">
        <tstamp/>
    </target>

    <!-- Compiles the java source files. -->
    <target name="compile" depends="init">
        <mkdir dir="${freecol.build.dir}"/>
        <javac srcdir="${freecol.src.dir}"
               destdir="${freecol.build.dir}"
               classpathref="freecol.build.classpath"
               debug="on"
               optimize="on"
               deprecation="off"
               source="${java.target.version}"
               target="${java.target.version}"
               includeantruntime="false">
            <compilerarg value="-Xlint:unchecked"/>
            <compilerarg value="-Xlint:deprecation"/>
            <compilerarg value="-g"/>
        </javac>
    </target>

    <!-- Compile the JUnit tests -->
    <target name="compile-test" depends="init">
        <mkdir dir="${freecol.build.dir}"/>
        <javac srcdir="test/src"
               destdir="${freecol.build.dir}"
               classpathref="test.build.classpath"
               debug="on"
               optimize="on"
               deprecation="off"
               source="${java.target.version}"
               target="${java.target.version}"
               includeantruntime="false">
            <compilerarg value="-Xlint:unchecked"/>
            <compilerarg value="-Xlint:deprecation"/>
            <compilerarg value="-g"/>
        </javac>
    </target>

    <target name="build" depends="init,compile"
            description="Compiles the source files.">
        <copy todir="${freecol.build.dir}">
            <fileset dir="${freecol.src.dir}" includes="**/*.xml" />
        </copy>
    </target>

    <condition property="have-revision">
        <isset property="FreeCol.Revision" />
    </condition>

    <target name="manifest" 
            description="Creates the Manifest file.">
        <manifestclasspath property="jar.classpath"
                           jarfile="Freecol.jar">
            <classpath refid="libraries.classpath" />
        </manifestclasspath>
        <manifest file="${basedir}/src/MANIFEST.MF">
            <attribute name="Created-By" value="FreeCol Team"/>
            <attribute name="Main-Class" value="net.sf.freecol.FreeCol"/>
            <attribute name="Class-Path" value="${jar.classpath}"/>
            <attribute name="Product-Name" value="FreeCol"/>
            <attribute name="Package-Title" value="FreeCol"/>
            <attribute name="Package-Version" value="${FreeCol.Revision}"/>
            <attribute name="Package-Vendor" value="FreeCol Team"/>
        </manifest>
    </target>

    <!-- Compiles the source files and creates a JAR-file. -->
    <target name="package" depends="init,build,manifest" description="Compiles the source files and creates a JAR-file.">
        <jar jarfile="${freecol.jar.file}"
             basedir="${freecol.build.dir}"
             manifest="${basedir}/src/MANIFEST.MF"
             includes="net/**, splash.jpg"
             excludes="**/metaserver/**"/>
    </target>

    <!-- Compiles the metaserver and creates a JAR-file. -->
    <target name="metaserver" depends="init,build,manifest" description="Compiles the metaserver and creates a JAR-file.">
        <jar jarfile="${freecol.metaserver.jar.file}"
             basedir="${freecol.build.dir}"
             manifest="${basedir}/src/MANIFEST.MF"
             includes="net/**, org/**"/>
    </target>

    <target name="mydist" depends="mydistWindows,mydistMac,mydistJava"
            description="Creates a distribution package for the current system." />
    <target name="mydistWindows" if="isOsWindows">
        <antcall target="winInstallerBundle"/>
    </target>
    <target name="mydistMac" if="isOsMac">
        <antcall target="tarMacJavaBundle"/>
    </target>
    <target name="mydistJava" if="isNotMacOrWindows">
        <antcall target="javaInstallerBundle"/>
    </target>

    <!--
        Creates archives and installers for distribution and places these in the
        "dist" directory.
        Various platforms can be omitted for prerelease testing by
        setting properties on the command line:
        skip.dist.mac="true" suppresses mac packaging
        skip.dist.installer="true" suppresses creation of installers
        skip.dist.java="true" suppresses zip and tar creation of the jarfiles
        skip.dist.source="true" suppresses packaging the source files

        For a formal release, none of these properties should be set.
    -->
    <target name="dist"
            description="Creates archives and installers for distribution."
            depends="init,initDist,javaInstallerBundle,winInstallerBundle">

        <echo message="" />
        <echo message="-------------------------------------------------"/>
        <echo message="Distribution files created:"/>
        <echo message="${freecol.release.dir}"/>
        <echo message="-------------------------------------------------"/>
    </target>

    <target name="initDist" depends="init,setReleaseVersion">
        <mkdir dir="${freecol.release.dir}"/>
    </target>

    <target name="setReleaseVersion" depends="askReleaseVersion">
        <property name="freecol.release.name"
                  value="${freecol.name}-${freecol.version}"/>
        <echo message="Creating Distribution of ${freecol.release.name}"/>
        <replaceregexp file="${freecol.src.dir}/net/sf/freecol/FreeCol.java"
                       match="FREECOL_VERSION\s*=\s*&quot;(.*?)&quot;\;"
                       replace="FREECOL_VERSION = &quot;${freecol.version}&quot;\;"/>
        <replaceregexp file="${freecol.doc.dir}/version.sty"
                       match="fcversion\}\{(.*?)\}"
                       replace="fcversion\}\{${freecol.version}\}"/>
        <echo message="Game version updated in FreeCol.java" />
    </target>

    <target name="askReleaseVersion" unless="freecol.version">
        <input message="Please specify the release version (default: git-${DSTAMP}): "
               addproperty="freecol.version" defaultvalue="git-${DSTAMP}" />
    </target>

    <target name="prepareBaseFiles" depends="initDist">
        <antcall target="clean"/>
        <antcall target="package"/>
        <mkdir dir="${freecol.release.dir}/base/${freecol.name}"/>
        <copy todir="${freecol.release.dir}/base/${freecol.name}">
            <fileset dir="${basedir}" includes="FreeCol.jar"/>
            <fileset dir="${basedir}" includes="splash.jpg"/>
            <fileset dir="${freecol.packaging.dir}/common" includes="COPYING"/>
            <fileset dir="${freecol.packaging.dir}/common" includes="README"/>
            <fileset dir="${freecol.packaging.dir}/common"
                     includes="freecol.cmd"/>
            <fileset dir="${freecol.packaging.dir}/common"
                     includes="freecol.xpm"/>
            <fileset dir="${basedir}" includes="data/**"/>
            <fileset dir="${basedir}" includes="jars/**"/>
        </copy>
        <copy file="${freecol.packaging.dir}/common/freecol.sh"
              tofile="${freecol.release.dir}/base/${freecol.name}/freecol"/>
    </target>

    <target name="prepareSourceFiles" depends="initDist">
        <antcall target="clean"/>
        <mkdir dir="${freecol.release.dir}/source/${freecol.name}"/>
        <copy todir="${freecol.release.dir}/source/${freecol.name}">
            <fileset dir="${basedir}"
                     excludes="splash.jpg,dist/**,data/**,jars/**,www.freecol.org/**,nbproject/**,unused/**"/>
        </copy>
    </target>

    <target name="prepareWinFiles" depends="initDist,define-jsmoothgen">
        <jsmoothgen project="${freecol.build.dir}/startup.jsmooth"
                    skeletonroot="${freecol.build.dir}/skeletons"/>
        <move todir="${freecol.release.dir}/win/${freecol.name}">
            <fileset dir="${freecol.build.dir}" includes="freecol.exe"/>
        </move>
        <mkdir dir="${freecol.release.dir}/win/${freecol.name}/Uninstaller"/>
        <jsmoothgen project="${freecol.build.dir}/uninstaller.jsmooth"
                    skeletonroot="${freecol.build.dir}/skeletons"/>
        <move todir="${freecol.release.dir}/win/${freecol.name}/Uninstaller">
            <fileset dir="${freecol.build.dir}" includes="uninstaller.exe"/>
        </move>
    </target>

    <target name="javaInstallerBundle" unless="skip.dist.installer"
            description="Builds a platform independent installer"
            depends="initDist,prepareWinFiles,prepareBaseFiles,prepareSourceFiles,installer-translations">
        <taskdef name="izpack"
                 classname="com.izforge.izpack.ant.IzPackTask"
                 classpath="${freecol.build.dir}/jars/standalone-compiler.jar"/>
        <antcall target="executeIzpack" />
    </target>

    <target name="winInstallerBundle" unless="skip.dist.installer"
            description="Builds a windows installer"
            depends="initDist,javaInstallerBundle,define-jsmoothgen">
        <copy todir="${freecol.release.dir}">
            <fileset dir="${freecol.build.dir}" includes="installer.jsmooth"/>
        </copy>
        <replace file="${freecol.release.dir}/installer.jsmooth"
                 token="%ant:freecol.release.name%"
                 value="${freecol.release.name}"/>
        <replace file="${freecol.release.dir}/installer.jsmooth"
                 token="%ant:freecol.installerjar%"
                 value="${freecol.release.dir}/${freecol.release.name}-installer.jar"/>
        <jsmoothgen project="${freecol.release.dir}/installer.jsmooth"
                    skeletonroot="${freecol.build.dir}/skeletons"/>
    </target>

    <!-- Builds a doubleclickable application bundle running on Mac OS X -->
    <target name="macJavaBundle" unless="skip.dist.mac"
            depends="prepareBaseFiles">
        <!-- JarBundler is a feature-rich Ant task which will create a Mac OS X
             application bundle from a list of Jar files and a main class name.
             (GPL-Software) -> http://informagen.com/JarBundler/  -->
        <taskdef name="jarbundler"
                 classname="net.sourceforge.jarbundler.JarBundler"
                 classpath="${freecol.build.dir}/jars/jarbundler.jar"/>
        <jarbundler dir="${freecol.release.dir}"
                    name="FreeCol"
                    mainclass="net.sf.freecol.FreeCol"
                    version="${freecol.version}"
                    vmoptions="-Xmx256M -Dapple.awt.fakefullscreen=true"
                    jvmversion="1.8+"
                    arguments="--windowed --freecol-data FreeCol.app/Contents/Resources/"
                    stubfile="${freecol.build.dir}/skeletons/FreeCol"
                    icon="${freecol.packaging.dir}/icons/FreeCol.icns">
            <jarfileset dir="${freecol.release.dir}/base/freecol/">
                <include name="**/*" />
                <exclude name="data/**" />
            </jarfileset>
            <resourcefileset dir="${freecol.release.dir}/base/freecol/data" />
        </jarbundler>
    </target>

    <!-- Cleans the directories by removing auto-generated files. -->
    <target name="clean" depends="init"
            description="Cleans the directories by removing auto-generated files.">
        <delete quiet="true" includeEmptyDirs="true">
            <fileset dir="${freecol.build.dir}" includes="net/**" />
            <fileset dir="${freecol.build.dir}" includes="timestamp.inf" />
            <fileset dir="${freecol.build.dir}" includes="report/**" />
            <fileset dir="${freecol.build.dir}" includes="TEST-net.sf.freecol.*" />
            <fileset dir="${freecol.build.dir}" includes="dependencies.txt" />
            <fileset dir="${freecol.doc.dir}"
                     excludes="*.tex *.sty images/* specification.*" />
        </delete>
        <delete quiet="true" file="${freecol.jar.file}"/>
        <delete quiet="true" file="${freecol.metaserver.jar.file}"/>
        <delete quiet="true" file="TESTS-TestSuites.xml"/>
        <delete quiet="true" dir="${freecol.javadoc.dir}"/>
        <delete quiet="true" file="Freecol.log"/>
        <delete quiet="true" file="${basedir}/test/data/specification.xml"/>
    </target>

    <!-- Generate JavaDoc documentation. -->
    <target name="javadoc" depends="init"
            description="Generate JavaDoc documentation.">
        <mkdir dir="${freecol.javadoc.dir}"/>
        <javadoc sourcepath="${freecol.src.dir}"
                 overview="${freecol.overview.file}"
                 destdir="${freecol.javadoc.dir}"
                 packagenames="net.sf.freecol.*"
                 private="true"
                 classpathref="freecol.build.classpath"
                 Author="true"
                 Windowtitle="FreeCol Code Documentation"/>
        <echo message="" />
        <echo message="-------------------------------------------------"/>
        <echo message="JavaDoc-generated documentation created:"/>
        <echo message="${freecol.javadoc.dir}"/>
        <echo message="-------------------------------------------------"/>
    </target>


    <!-- example:
         ant -lib test/lib/junit.jar -Dtest=common.model.BuildingTest test
    -->
    <target name="test" depends="build-unit-tests"
            description="Runs a particular unit test">
        <!-- if the next fails then here is the long answer:
             http://ant.apache.org/faq.html#delegating-classloader
             the short answer depends.
             if you have Ant 1.7, the junit.jar can exist on the classpath.
             upgrading to 1.7 may be the best solution.  Later ant
             should be fine.

             if you have Ant 1.6:
             ant -lib test/lib/junit.jar testall
             if you have a version of Ant prior to 1.6 on Windows:
             set CLASSPATH=%CLASSPATH%;test\lib\junit.jar
             ant testall
             if you have a version of Ant prior to 1.6 on UNIX:
             export CLASSPATH=${CLASSPATH}:test/lib/junit.jar; ant testall
        -->
        <junit printsummary="yes">
            <classpath refid="test.run.classpath"/>
            <formatter type="brief" usefile="false" />
            <formatter type="plain" />
            <test todir="${freecol.build.dir}" name="net.sf.freecol.${test}" />
            <sysproperty key="java.awt.headless" value="true" />
        </junit>
        <echo message="For more detailed information about this test run see:"/>
        <echo message="${freecol.build.dir}/TEST-net.sf.freecol.${test}.txt"/>
    </target>

    <target name="testall" depends="build-unit-tests" unless="skip.dist.test"
            description="Runs all unit tests">
        <delete dir="${freecol.build.dir}/report" />
        <mkdir dir="${freecol.build.dir}/report"/>
        <mkdir dir="${freecol.build.dir}/report/xml"/>
        <!-- if the next fails then here is the long answer:
             http://ant.apache.org/faq.html#delegating-classloader
             the short answer depends.
             if you have Ant 1.7, the junit.jar can exist on the classpath.
             upgrading to 1.7 may be the best solution.

             if you have Ant 1.6:
             ant -lib test/lib/junit.jar testall
             if you have a version of Ant prior to 1.6 on Windows:
             set CLASSPATH=%CLASSPATH%;test\lib\junit.jar
             ant testall
             if you have a version of Ant prior to 1.6 on UNIX:
             export CLASSPATH=${CLASSPATH}:test/lib/junit.jar; ant testall
        -->
        <junit printsummary="on" errorProperty="error.junit"
               failureProperty="error.junit" fork="yes" maxmemory="96M">
            <classpath refid="test.run.classpath"/>
            <formatter type="xml" />

            <test todir="${freecol.build.dir}/report/xml"
                  name="net.sf.freecol.AllTests" fork="yes"/>

            <!--
                <batchtest fork="false" todir="${freecol.build.dir}/report/xml">
                <fileset dir="test/src" includes="**/*Test.java" />
                </batchtest>
            -->
            <sysproperty key="java.awt.headless" value="true" />
        </junit>

        <junitreport>
            <fileset dir="${freecol.build.dir}/report/xml">
                <include name="TEST-*.xml"/>
            </fileset>
            <report todir="${freecol.build.dir}/report" />
        </junitreport>

        <echo message="For detailed results of the test run see: ${freecol.build.dir}/report/index.html"/>

        <fail if="error.junit" message="Automated Unit Tests failed."/>
    </target>

    <target name="build-unit-tests" depends="build">
        <depend srcDir="test/src" destDir="${freecol.build.dir}"
                cache="${freecol.build.dir}" />
        <javac srcdir="test/src"
               destdir="${freecol.build.dir}"
               classpathref="test.build.classpath"
               debug="on"
               optimize="on"
               deprecation="off"
               source="${java.target.version}"
               target="${java.target.version}"
               includeantruntime="false">
            <compilerarg value="-Xlint:unchecked"/>
            <compilerarg value="-Xlint:deprecation"/>
        </javac>
    </target>

    <target name="fixTabsWindows">
        <fixcrlf srcdir="${freecol.src.dir}" tab="remove" tablength="4"
                 includes="**/*.java" eol="crlf"/>
    </target>

    <target name="fixTabsUnix">
        <fixcrlf srcdir="${freecol.src.dir}" tab="remove" tablength="4"
                 includes="**/*.java" eol="lf"/>
    </target>

    <!-- Creates installer strings. -->
    <target name="installer-translations" depends="build"
            description="Creates properties files for installer translations.">
        <java classname="net.sf.freecol.tools.InstallerTranslations"
              classpath="build/" />
    </target>


    <target name="prepare-commit"
            description="Rebuild from scratch and run all tests."
            depends="clean,package,testall"/>

    <!-- This is a shortcut for NetBeans, and possibly other IDEs. -->
    <target name="run" depends="package" description="Runs the game">
        <java jar="FreeCol.jar" fork="true">
            <jvmarg value="-Xmx256M" />
        </java>
    </target>

</project>
